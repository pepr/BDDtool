- fesyn.py -- .feature syntactic parser:
  - the syntax tree should probably reflect the nesting of sections
  - pretty printing the syntax tree (probably a generator)
  - generator of catch sources based on fesyn

- fesynTest.py
  - more tests

- tsyn.py -- Catch test syntactic analyzer
- write tsynTest.py
- tlex: adding tests for syntactically wrong sources
- felex: adding tests for syntactically wrong sources

- c2f.py = catchtest to features -- generating missing .feature documents
  from tests as .featurenew
- How to include include i18n portions for the tokens?

- compare syntax trees from the feature description and from the Catch source

- build also Python 2.7 version with the same functionality
- possibly a C++ implementation of the BDDtool


To be tested
============
- Recognizing Catch scenarios with various ways of formatting and with
  nested curly braces (i.e. better parser)


Variant prefixes of element descriptions
========================================
- more free form of sentences in .feature (no colon)
- per human-language based code for fixing the extracted info from
  the free form (basically punctuation at the beginning and at the end
  of the extracted parts -- thiking about Czech here, possibly no problems
  in English)
- the strict and the free form are equal in the semantic sense


Internationalization
====================
- jazykové varianty klíčových slov na jedno místo pro snadné úpravy
  (Scenario, Scénář, Example, Příklad)
- různé jazykové elementy lze míchat; default jazyk se rozpoznává
  podle klíčového slova použitého pro element Feature
- ability to tell the output human language form via an option


Possible extension of the BDDtool
=================================
- generating skeletons for Python unit testing -- then this application
  could test itself (eat my own dog's food for this Python application).
- generating skeletons for Java, C# etc.
